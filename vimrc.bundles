
" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
" configure Vundle
filetype off " required! turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" ####################  主题 ########################
" molokai
Bundle 'tomasr/molokai'
let g:molokai_original = 1  " monokai原始背景色


" ################### 基础 ######################
 " 多语言语法检查
if v:version > 702
	Bundle 'scrooloose/syntastic'
	let g:syntastic_error_symbol='>>'
	let g:syntastic_warning_symbol='>'
	let g:syntastic_check_on_open=1
	let g:syntastic_check_on_wq=0
	let g:syntastic_enable_highlighting=1

	" 最轻量
	"let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes

	" 中等
	" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
	" let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
	" let g:syntastic_python_pep8_args='--ignore=E501,E225'

	" 重量级, 但是足够强大, 定制完成后相当个性化
	" pylint codes: http://pylint-messages.wikidot.com/all-codes
	let g:syntastic_python_checkers=['pylint']
	" let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
	" let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
	" let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

	let g:syntastic_javascript_checkers = ['jsl', 'jshint']
	let g:syntastic_html_checkers=['tidy', 'jshint']
	" 修改高亮的背景色, 适应主题
	highlight SyntasticErrorSign guifg=white guibg=black

	" to see error location list
	let g:syntastic_always_populate_loc_list = 0
	let g:syntastic_auto_loc_list = 0
	let g:syntastic_loc_list_height = 5

	function! ToggleErrors()
	    let old_last_winnr = winnr('$')
	    lclose
	    if old_last_winnr == winnr('$')
	        " Nothing was closed, open syntastic error location panel
	        Errors
	    endif
	endfunction
	nnoremap <Leader>s :call ToggleErrors()<cr>
	" nnoremap <Leader>sn :lnext<cr>
	" nnoremap <Leader>sp :lprevious<cr>
endif


" 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'

 "" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
"关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0

" 自动补全html/xml标签
Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1


" ################### 功能相关 ###################

" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
" 如果安装了ag, 使用ag
" if executable('ag')
  " " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0
" endif


" ctrlp插件1 - 不用ctag进行函数快速跳转
Bundle 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']

" 类似sublimetext的搜索
Bundle "dyng/ctrlsf.vim"
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
    \ "open"  : "<Space>",
    \ "openb" : "O",
    \ "tab"   : "t",
    \ "tabb"  : "T",
    \ "prevw" : "p",
    \ "quit"  : "q",
    \ "next"  : "<C-J>",
    \ "prev"  : "<C-K>",
    \ "pquit" : "q",
    \ }


" ################### 快速编码 ###################
if v:version > 702
	" 快速补全
	Bundle 'Shougo/neocomplcache'
	let g:neocomplcache_enable_at_startup = 1
endif

" 快速注释
Bundle 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1


" 快速加入修改环绕字符
Bundle 'tpope/vim-surround'
" for repeat -> enhance surround.vim, . to repeat command
Bundle 'tpope/vim-repeat'

" 快速去行尾空格 [, + <Space>]
Bundle 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>

" 快速赋值语句对齐
Bundle 'junegunn/vim-easy-align'
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }

" ################### 快速移动 ###################

"更高效的移动 [,, + w/fx]
Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)



Bundle 'vim-scripts/matchit.zip'

" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
Bundle "kshenoy/vim-signature"


" ################### 快速选中 ###################
" 选中区块
Bundle 'terryma/vim-expand-region'
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

if v:version > 702
	" 多光标选中编辑
	Bundle 'terryma/vim-multiple-cursors'
	let g:multi_cursor_use_default_mapping=0
	" Default mapping
	let g:multi_cursor_next_key='<C-m>'
	let g:multi_cursor_prev_key='<C-p>'
	let g:multi_cursor_skip_key='<C-x>'
	let g:multi_cursor_quit_key='<Esc>'
endif


" ########################### 快速导航 ###################################

"目录导航
if v:version > 702
	Bundle 'scrooloose/nerdtree'
	map <leader>n :NERDTreeToggle<CR>
	let NERDTreeHighlightCursorline=1
	let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
	"close vim if the only window left open is a NERDTree
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
	" s/v 分屏打开文件
	let g:NERDTreeMapOpenSplit = 's'
	let g:NERDTreeMapOpenVSplit = 'v'


	Bundle 'jistr/vim-nerdtree-tabs'
	map <Leader>n <plug>NERDTreeTabsToggle<CR>
	" 关闭同步
	let g:nerdtree_tabs_synchronize_view=0
	let g:nerdtree_tabs_synchronize_focus=0
	" 自动开启nerdtree
	"let g:nerdtree_tabs_open_on_console_startup=1
endif


" Vim Workspace Controller
Bundle "szw/vim-ctrlspace"
let g:airline_exclude_preview = 1
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8



" 标签导航
if v:version > 701
	Bundle 'majutsushi/tagbar'
	nmap <F9> :TagbarToggle<CR>
	let g:tagbar_autofocus = 1
	" for ruby
	let g:tagbar_type_ruby = {
	    \ 'kinds' : [
	        \ 'm:modules',
	        \ 'c:classes',
	        \ 'd:describes',
	        \ 'C:contexts',
	        \ 'f:methods',
	        \ 'F:singleton methods'
	    \ ]
	\ }

	" go语言的tagbar配置
	" 1. install gotags 'go get -u github.com/jstemmer/gotags'
	" 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
	" for gotags. work with tagbar
	let g:tagbar_type_go = {
	    \ 'ctagstype' : 'go',
	    \ 'kinds'     : [
	        \ 'p:package',
	        \ 'i:imports:1',
	        \ 'c:constants',
	        \ 'v:variables',
	        \ 't:types',
	        \ 'n:interfaces',
	        \ 'w:fields',
	        \ 'e:embedded',
	        \ 'm:methods',
	        \ 'r:constructor',
	        \ 'f:functions'
	    \ ],
	    \ 'sro' : '.',
	    \ 'kind2scope' : {
	        \ 't' : 'ctype',
	        \ 'n' : 'ntype'
	    \ },
	    \ 'scope2kind' : {
	        \ 'ctype' : 't',
	        \ 'ntype' : 'n'
	    \ },
	    \ 'ctagsbin'  : 'gotags',
	    \ 'ctagsargs' : '-sort -silent'
	\ }
endif

" ################### 语言相关 ###################
if v:version > 702
	" 快速运行
	Bundle 'thinca/vim-quickrun'
	let g:quickrun_config = {
	\   "_" : {
	\       "outputter" : "message",
	\   },
	\}

	let g:quickrun_no_default_key_mappings = 1
	nmap <Leader>r <Plug>(quickrun)
	"map <F10> :QuickRun<CR>
	map <F4> :QuickRun<CR>
endif

" ###### Python #########

" python fly check, 弥补syntastic只能打开和保存才检查语法的不足
"Bundle 'kevinw/pyflakes-vim'
"let g:pyflakes_use_quickfix = 0

" for python.vim syntax highlight
"Bundle 'hdima/python-syntax'
"let python_highlight_all = 1

" ###### Golang #########
" 1.install golang and install gocode 'go get github.com/nsf/gocode'
" 2.make sure gocode in your path: `which gocode` (add $GOPATH/bin to you $PATH)
Bundle 'Blackrush/vim-gocode'
" Bundle 'fatih/vim-go.git'

" ###### Ruby #########
" Bundle 'vim-ruby/vim-ruby'
" Bundle 'nelstrom/vim-textobj-rubyblock'

" 有bug, 和当前有冲突, 尚未解决, 不要打开
" Bundle 'tpope/vim-endwise'


" ###### Markdown #########
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1



" ###### HTML/JS/JQUERY/CSS #########

" for javascript  注意: syntax这个插件要放前面
Bundle 'jelera/vim-javascript-syntax'
Bundle "pangloss/vim-javascript"
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"


" for javascript 自动补全,配合YCM,需要安装nodejs&npm  see
" https://github.com/marijnh/tern_for_vim
" Bundle 'marijnh/tern_for_vim'

" for jquery
Bundle 'nono/jquery.vim'

" ###### emmet HTML complete #########
" Bundle "mattn/emmet-vim"

" ###### vim.less : less 自动更新##########
" Bundle 'groenewege/vim-less'
" autocmd BufWritePost *.less :!lessc % > %:p:r.css

" ###### Jinja2 #########
Bundle 'Glench/Vim-Jinja2-Syntax'

" for css color
" not work in iterm2 which termianl selection is not xterm-256
" Bundle 'ap/vim-css-color'
"
"################ DBGPavim 远程调试 ####################
"调试监视插件，如果是python需要vim支持python
Bundle 'brookhong/DBGPavim'

let g:dbgPavimPort = 9009
let g:dbgPavimBreakAtEntry =0

